apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.example.admin.androidtree"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            multiDexEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    testCompile 'junit:junit:4.12'
    //轮播图架包
    compile 'com.jude:rollviewpager:1.4.6'
    //网络请求包
    compile 'com.squareup.retrofit2:retrofit:2.0.0-beta4'
    //Retrofit2所需要的包
    compile 'com.squareup.retrofit2:converter-gson:2.0.0-beta4'
    //ConverterFactory的Gson依赖包
    compile 'com.squareup.retrofit2:converter-scalars:2.0.0-beta4'
    //ConverterFactory的String依赖包
    compile 'com.squareup.retrofit2:adapter-rxjava:2.2.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.6.0'
    compile 'com.squareup.okhttp3:okhttp:3.6.0'
    compile 'com.android.support:design:25.1.1'
    compile 'org.greenrobot:eventbus:3.0.0'

    compile project(path: ':android-library-image')
    compile project(path: ':android-library-pulltorefresh')
    compile project(path: ':android-library-voice2')
}

android.applicationVariants.all { variant ->
    variant.assemble.doLast {
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            def versionSuffix = variant.buildType.versionNameSuffix ? variant.buildType.versionNameSuffix : ""
            def customSuffix = project.hasProperty('suffix') ? "_" + suffix : ""
            def versionCode = variant.mergedFlavor.versionCode + versionSuffix;
            // 移出apk并重命名
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                println("copying apk")
                def renameApkFile = outputFile.name.replace("app", "diana-knowladge-" + versionCode).replace(".apk", customSuffix + ".apk")

                copy {
                    from "$outputFile"
                    into "$rootProject.projectDir/../apk"
                    rename("$outputFile.name", "$renameApkFile")
                }
            }
        }
    }
}

